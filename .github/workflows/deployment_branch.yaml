name: deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Deployment tag (typically a branch name or git commit sha) to deploy to non-production environments; otherwise will pick up current commit hash."
      argocd_target_paths:
        description: "ArgoCD Application Deployment Targets, i.e. `argocd/application/{'argocd/application/{0}.yaml' - github.event.repository.name}` or similar."
  workflow_run:
    workflows: ["buildx"]
    branches: ["main"]
    types:
      - completed

env:
  ARGOCD_TARGET_PATH: "${{ inputs.argocd_target_paths || vars.ARGOCD_TARGET_PATH || secrets.ARGOCD_TARGET_PATH || format('argocd/application/{0}.yaml', github.event.repository.name) }}"

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Define Variables
        id: vars
        run: |
          echo "::set-output name=version::`echo ${GITHUB_SHA} | cut -c1-8`"
    outputs:
      version: ${{ steps.vars.outputs.version }}

  # canary to k8s
  deploy-canary:
    name: Deploy / Canary
    runs-on: ubuntu-latest
    needs:
      - prepare-deployment
    environment:
      name: canary
      url: https://app.canary.ithacanoemon.tech
    env:
      APP: "${{ github.event.repository.name }}"
      IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
      IMAGE_TAG: ${{ github.event.inputs.tag || needs.prepare-deployment.outputs.version }}
      TARGET_ENVIRONMENT: "canary"
      TARGET_CLUSTER: "eks-ithacanoemon-canary"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Review ArgoCD Target Path
        id: argocd_target_path
        shell: bash
        run: |
          if [[ "${{ env.ARGOCD_TARGET_PATH }}" == *,* ]]; then
            echo "The ARGOCD_TARGET_PATH environment variable has multiple paths. Concatinating with TARGET_ENVIRONMENT."
            read -ra target_paths <<< "${{ env.ARGOCD_TARGET_PATH }}"
            argocd_target_paths_new=()
            for path in "${target_paths[@]}";
              do
                argocd_target_paths_new+=("${TARGET_ENVIRONMENT}/${path}")
              done
            echo "::set-output name=argocd_target_paths::${argocd_target_paths_new[@]}"
            echo "ARGOCD_TARGET_PATH set: ${argocd_target_paths_new[@]}"
          else
            echo "The ARGOCD_TARGET_PATH environment variable has only single path."
            echo "::set-output name=argocd_target_paths::`echo ${TARGET_ENVIRONMENT}/${ARGOCD_TARGET_PATH}`"
            echo "ARGOCD_TARGET_PATH set: ${ARGOCD_TARGET_PATH}"
          fi
      - name: Deployment
        uses: ithaca-protocol/infra-github-actions-ithaca/argocd-deploy-v2@main
        with:
          argocd_repo_ref: ${{ secrets.ARGOCD_REPO_REF }}
          argocd_git_token: ${{ secrets.ARGOCD_APP_ACCESS_TOKEN }}
          argocd_repo: ${{ secrets.ARGOCD_REPO_PATH }}
          argocd_target_path: "${{ steps.argocd_target_path.outputs.argocd_target_paths || format('{0}/{1}', env.TARGET_ENVIRONMENT, env.ARGOCD_TARGET_PATH) }}"
          update_paths: ${{ secrets.ARGOCD_UPDATE_PATHS }}
          update_value: "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
          update_message: "(CICD) Deploy ${{ env.APP}}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ env.TARGET_ENVIRONMENT}}"
      - name: Success Notification
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*KUBERNETES DEPLOYMENT COMPLETE*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}` \n`${{ github.actor }}` pushed `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      - name: Failure Notification
        if: failure()
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*[WARNING!] FAILED TO DEPLOY!!*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}`: \n`${{ github.actor }}` tried to push `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  deploy-uat:
    name: Amplify / UAT
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    strategy:
      matrix:
        environment: [uat]
    needs:
      - prepare-deployment
      - deploy-canary
    environment:
      name: ${{ matrix.environment }}
      url: https://testnet.ithacaprotocol.io
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'eu-west-1' }}
      AWS_DEFAULT_OUTPUT: json
      AWS_AMPLIFY_APP_ID: ${{ vars.AWS_AMPLIFY_APP_ID }}
      APP: ${{ github.event.repository.name }}
      IMAGE_REPO: ${{ secrets.IMAGE_REPO || vars.IMAGE_REPO }}
      IMAGE_TAG: ${{ github.event.inputs.tag || needs.prepare-deployment.outputs.version }}
      TARGET_ENVIRONMENT: "staging"
      TARGET_AWS_ACCOUNT: "aws-ithacanoemon-development"
    steps:
      - name: Trigger Deployment
        id: amplify-deployment
        run: |
          aws amplify start-job --app-id ${{ env.AWS_AMPLIFY_APP_ID }} --branch-name $(echo ${GITHUB_REF##*/}) --job-type RELEASE --job-reason "CICD: Deploy ${{ env.APP }}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ env.TARGET_ENVIRONMENT }}" --commit-id `echo ${{ env.IMAGE_TAG }} | cut -c1-7` --output yaml
      - name: Success Notification
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*AWS AMPLIFY DEPLOYMENT TRIGGERED*: `${{ env.APP }}` on `${{ matrix.environment }}` \n`${{ github.actor }}` triggered build for `${{ env.APP }}` on `${{ matrix.environment }}`. *Amplify App ID*: `${{ env.AWS_AMPLIFY_APP_ID }}` \nAWS will notify when deployment is complete; details in AWS account. \n`${{ env.TARGET_AWS_ACCOUNT }}`; ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      - name: Failure Notification
        if: failure()
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*[WARNING!] FAILED TO DEPLOY!!*: `AWS AMPLIFY` `${{ env.APP }}` on `${{ matrix.environment }}` \n`${{ github.actor }}` tried but *FAILED* to trigger AWS Amplify deployment for `${{ env.APP }}` on `${{ matrix.environment }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # STANDARD K8S DEPLOYMENT PROCESS
  # -
  # Deactivated in lieu of leveraging AWS Amplify
  # ---------------------------------------------
  # deploy-uat:
  #   name: Deploy / Uat
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'success' }}
  #   needs:
  #     - prepare-deployment
  #     - deploy-canary
  #   environment:
  #     name: uat
  #     url: https://testnet.ithacaprotocol.io
  #   env:
  #     APP: ${{ github.event.repository.name }}
  #     IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
  #     IMAGE_TAG: ${{ github.event.inputs.tag || needs.prepare-deployment.outputs.version }}
  #     TARGET_ENVIRONMENT: "staging"
  #     TARGET_CLUSTER: "eks-ithacanoemon-staging"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Deployment
  #       uses: ithaca-protocol/infra-github-actions-ithaca/argocd-deploy-v2@main
  #       with:
  #         argocd_repo_ref: ${{ secrets.ARGOCD_REPO_REF }}
  #         argocd_git_token: ${{ secrets.ARGOCD_APP_ACCESS_TOKEN }}
  #         argocd_repo: ${{ secrets.ARGOCD_REPO_PATH }}
  #         argocd_target_path: "${{ env.TARGET_ENVIRONMENT}}/${{ secrets.ARGOCD_TARGET_PATH }}"
  #         update_paths: ${{ secrets.ARGOCD_UPDATE_PATHS }}
  #         update_value: "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
  #         update_message: "(CICD) Deploy ${{ env.APP}}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ env.TARGET_ENVIRONMENT}}"
  #     - name: Success Notification
  #       uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
  #       with:
  #         slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
  #         slack_message: "*KUBERNETES DEPLOYMENT COMPLETE*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}` \n`${{ github.actor }}` pushed `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #     - name: Failure Notification
  #       if: failure()
  #       uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
  #       with:
  #         slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
  #         slack_message: "*[WARNING!] FAILED TO DEPLOY!!*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}`: \n`${{ github.actor }}` tried to push `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
