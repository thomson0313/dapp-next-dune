name: deploy tag

env:
  APP: "ithaca-interface"
  IMAGE_TAG: ${{ github.event.inputs.tag || github.ref_name }}
  AWS_ECR: 178687878333.dkr.ecr.eu-west-1.amazonaws.com/ithacanoemon-interface

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag (typically a branch name or git commit sha) to deploy"
        required: true
        default: "v1.0.0"
  push:
    tags:
      - "v*.*.*"

jobs:
  image-retag:
    name: Docker Image Retag
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Convert in-place commit ref to version tag
        id: retag
        run: |
          export GITHUB_SHORT_SHA=`echo ${{ github.sha }} | cut -c1-8`
          curl -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 >regctl
          chmod 755 regctl
          ./regctl image copy ${{ env.AWS_ECR }}:${GITHUB_SHORT_SHA} ${{ env.AWS_ECR }}:${{ env.IMAGE_TAG }}
          echo "::set-output name=version::${GITHUB_SHORT_SHA}"

  deploy-production:
    name: Amplify / PRODUCTION
    runs-on: ubuntu-latest
    #if: ${{ (github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch') && format('refs/heads/{0}', github.event.repository.default_branch) == github.ref }}
    strategy:
      matrix:
        environment: [production]
    needs:
      - image-retag
    environment:
      name: ${{ matrix.environment }}
      url: https://app.ithacaprotocol.io
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'eu-west-1' }}
      AWS_DEFAULT_OUTPUT: json
      AWS_AMPLIFY_APP_ID: ${{ vars.AWS_AMPLIFY_APP_ID }}
      APP: ${{ github.event.repository.name }}
      IMAGE_REPO: ${{ secrets.IMAGE_REPO || vars.IMAGE_REPO }}
      IMAGE_TAG: ${{ github.event.inputs.tag || needs.prepare-deployment.outputs.version }}
      TARGET_ENVIRONMENT: "production"
      TARGET_AWS_ACCOUNT: "aws-ithacanoemon-production"
    steps:
      - name: Trigger Deployment
        id: amplify-deployment
        #run: |
        #  aws amplify start-job --app-id ${{ env.AWS_AMPLIFY_APP_ID }} --branch-name $(echo ${GITHUB_REF##*/}) --job-type RELEASE --job-reason "CICD: Deploy ${{ env.APP }}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ env.TARGET_ENVIRONMENT }}" --commit-id `echo ${{ github.sha }} | cut -c1-7` --output yaml
        # Production is branch main in AWS Amplify
        run: |
          aws amplify start-job --app-id ${{ env.AWS_AMPLIFY_APP_ID }} --branch-name main --job-type RELEASE --job-reason "CICD: Deploy ${{ env.APP }}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ matrix.environment }}" --commit-id `echo ${{ github.sha }} | cut -c1-7` --output yaml

      - name: Success Notification
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*AWS AMPLIFY DEPLOYMENT TRIGGERED*: `${{ env.APP }}` on `${{ matrix.environment }}` \n`${{ github.actor }}` triggered build on `${{ matrix.environment }}`. *Amplify App ID*: `${{ env.AWS_AMPLIFY_APP_ID }}` \nAWS will notify when deployment is complete; details in AWS account. \n`${{ env.TARGET_AWS_ACCOUNT }}`; ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      - name: Failure Notification
        if: failure()
        uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
        with:
          slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
          slack_message: "*[WARNING!] FAILED TO DEPLOY!!*: `AWS AMPLIFY` `${{ env.APP }}` on `${{ matrix.environment }}` \n`${{ github.actor }}` tried but *FAILED* to trigger AWS Amplify deployment for `${{ env.APP }}` on `${{ matrix.environment }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # STANDARD K8S DEPLOYMENT PROCESS
  # -
  # Deactivated in lieu of leveraging AWS Amplify
  # ---------------------------------------------
  # deploy-production:
  #   name: Deploy / Production
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'success' }}
  #   needs:
  #     - image-retag
  #   environment:
  #     name: production
  #     url: https://app.ithacaprotocol.io
  #   env:
  #     APP: ${{ github.event.repository.name }}
  #     IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
  #     IMAGE_TAG: ${{ github.event.inputs.tag || needs.prepare-deployment.outputs.version }}
  #     TARGET_ENVIRONMENT: "production"
  #     TARGET_CLUSTER: "eks-ithacanoemon-production"
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Deployment
  #       uses: ithaca-protocol/infra-github-actions-ithaca/argocd-deploy-v2@main
  #       with:
  #         argocd_repo_ref: ${{ secrets.ARGOCD_REPO_REF }}
  #         argocd_git_token: ${{ secrets.ARGOCD_APP_ACCESS_TOKEN }}
  #         argocd_repo: ${{ secrets.ARGOCD_REPO_PATH }}
  #         argocd_target_path: "${{ env.TARGET_ENVIRONMENT}}/${{ secrets.ARGOCD_TARGET_PATH }}"
  #         update_paths: ${{ secrets.ARGOCD_UPDATE_PATHS }}
  #         update_value: "${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"
  #         update_message: "(CICD) Deploy ${{ env.APP}}: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }} to ${{ env.TARGET_ENVIRONMENT}}"
  #     - name: Success Notification
  #       uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
  #       with:
  #         slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
  #         slack_message: "*KUBERNETES DEPLOYMENT COMPLETE*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}` \n`${{ github.actor }}` pushed `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #     - name: Failure Notification
  #       if: failure()
  #       uses: ithaca-protocol/infra-github-actions-ithaca/slack-notifications@main
  #       with:
  #         slack_notification_webhook: ${{ secrets.SLACK_WEBHOOK_ARGOCD_DEPLOY }}
  #         slack_message: "*[WARNING!] FAILED TO DEPLOY!!*: `${{ env.APP }}` on `${{ env.TARGET_CLUSTER }}`: \n`${{ github.actor }}` tried to push `${{ env.APP }}`: `${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}`. \nThe details at: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
